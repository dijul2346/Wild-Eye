from flask import Flask, jsonify, request, send_file, abort
from flask_cors import CORS
import cv2
import os
import threading
from collections import deque
from win10toast import ToastNotifier
import time
from ultralytics import YOLO

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for frontend-backend communication

# Initialize YOLOv8 model
model = YOLO(r"D:\Mini-Project\Modle\best.pt")  # Replace with your YOLOv8 model path

# Set up video capture
video_path = r"D:\Mini-Project\Video\videoplayback.mp4"
cap = cv2.VideoCapture(video_path)  # Use 0 for default webcam or provide video path
fps = cap.get(cv2.CAP_PROP_FPS)
cap.set(cv2.CAP_PROP_FPS, fps)

# Parameters
fps = 100  # Reduced frame rate for slower video playback
buffer_frames = fps * 5  # Number of frames to store for a 5-second buffer
frame_buffer = deque(maxlen=buffer_frames)  # Circular buffer to store frames
frame_skip = 4  # Skip every 4 frames for real-time speed

detection_count = 0  # Counter to track the number of detections
last_detection_time = 0  # Timestamp of the last detection
cooldown_period = 40  # Cooldown period in seconds (40 seconds)
current_animal_detected = False  # Flag to track if an animal is currently detected
last_detected_label = None  # Track the label of the last detected animal

# Initialize toast notifier
toast = ToastNotifier()

# Create a directory to save detected animal videos and images
output_dir = r"C:\Users\dijul\detected_animals"  # Updated path
os.makedirs(output_dir, exist_ok=True)

# Global variables for detections
detection_list = []  # List to store detections (timestamp, label, image_path, video_path)
sent_alerts = []  # List to store sent alerts

# Function to run the OpenCV detection loop in a separate thread
def detection_loop():
    global detection_count, last_detection_time, current_animal_detected, last_detected_label
    frame_counter = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Skip frames for real-time speed
        frame_counter += 1
        if frame_counter % frame_skip != 0:
            continue

        # Run YOLOv8 detection
        results = model(frame)
        detections = results[0].boxes

        # Add frame to the buffer
        frame_buffer.append(frame)

        current_animal_detected = False  # Reset flag for current frame

        for box in detections:
            conf = box.conf[0].item()  # Confidence score
            cls = int(box.cls[0].item())  # Class index
            label = model.names[cls]  # Get class label

            # Only process detections with confidence > 80%
            if conf > 0.8:
                current_time = time.time()

                # Check if the same animal was detected within the cooldown period
                if (current_time - last_detection_time) < cooldown_period and label == last_detected_label:
                    continue  # Skip this detection

                # Get bounding box coordinates
                x1, y1, x2, y2 = map(int, box.xyxy[0].tolist())

                # Draw bounding box and label on the frame
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)  # Green box
                cv2.putText(
                    frame,
                    f"{label} {conf:.2f}",
                    (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.5,
                    (0, 255, 0),
                    2,
                )

                # Save the detected frame as an image
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                image_path = os.path.join(output_dir, f"detected_{timestamp}.jpg")
                cv2.imwrite(image_path, frame)

                # Save the video if detection count exceeds threshold
                video_path = os.path.join(output_dir, f"detected_{timestamp}.mp4")  # Use .mp4 format
                out = cv2.VideoWriter(video_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (frame.shape[1], frame.shape[0]))
                for buffered_frame in frame_buffer:
                    out.write(buffered_frame)
                out.release()

                # Add detection to the list
                detection_list.append({
                    "timestamp": timestamp,
                    "label": label,
                    "image_path": f"detected_{timestamp}.jpg",  # Relative path
                    "video_path": f"detected_{timestamp}.mp4",  # Relative path
                    "sent": False  # Mark as unsent by default
                })

                # Show notification when animal is detected
                toast.show_toast("Animal Detected", f"{label} detected with confidence {conf:.2f}.", duration=10)

                # Update the last detection time and label
                last_detection_time = current_time
                last_detected_label = label
                current_animal_detected = True  # Set flag for current frame

        # Exit the loop when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Cleanup resources
    cap.release()
    cv2.destroyAllWindows()

# Start the detection loop in a separate thread
detection_thread = threading.Thread(target=detection_loop)
detection_thread.daemon = True
detection_thread.start()

# API Endpoints
@app.route("/detections", methods=["GET"])
def get_detections():
    return jsonify(detection_list)

@app.route("/mark-sent/<int:index>", methods=["POST"])
def mark_sent(index):
    if 0 <= index < len(detection_list):
        detection_list[index]["sent"] = True
        sent_alerts.append(detection_list[index])
        return jsonify({"status": "success", "message": "Alert marked as sent."})
    return jsonify({"status": "error", "message": "Invalid index."}), 400

@app.route("/image/<path:filename>", methods=["GET"])
def get_image(filename):
    try:
        return send_file(os.path.join(output_dir, filename))
    except FileNotFoundError:
        abort(404, description="Image not found")

@app.route("/video/<path:filename>", methods=["GET"])
def get_video(filename):
    try:
        return send_file(
            os.path.join(output_dir, filename),
            mimetype="video/mp4"  # Set the correct MIME type
        )
    except FileNotFoundError:
        abort(404, description="Video not found")

# Run the Flask app
if __name__ == "__main__":
    app.run(debug=False)  # Disable debug mode for standalone execution
